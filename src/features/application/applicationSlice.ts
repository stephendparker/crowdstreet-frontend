import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { postApplication, InvestorApplicationRequest } from './applicationAPI';

export interface ApplicationForm
{
    investmentAmount: string | undefined;
    investmentType: string;
    totalNetWorth: string | undefined;
    yearlyIncome: string | undefined;
    creditScore: string;
}

export interface ApplicationResult
{
    qualify: boolean;
    disqualificationMessage: string | undefined;
}

export interface ApplicationState
{
    form: ApplicationForm;
    result: ApplicationResult | undefined;
    errorMessage: string | undefined;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: ApplicationState = {
    form: {
        investmentAmount: "",
        investmentType: "",
        totalNetWorth: "",
        yearlyIncome: "",
        creditScore: ""
    },
    errorMessage: undefined,
    result: undefined,
    status: 'idle',
};

export const applyAsync = createAsyncThunk(
    'application/postApplication',
    async (application: InvestorApplicationRequest) =>
    {
        const response = await postApplication(application);
        return response.data;
    }
);

export const applicationSlice = createSlice({
    name: 'application',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setInvestmentAmount: (state, action: PayloadAction<string | undefined>) =>
        {
            state.form.investmentAmount = action.payload;
        },
        setInvestmentType: (state, action: PayloadAction<string>) =>
        {
            state.form.investmentType = action.payload;
        },
        setTotalNetWorth: (state, action: PayloadAction<string | undefined>) =>
        {
            state.form.totalNetWorth = action.payload;
        },
        setYearlyIncome: (state, action: PayloadAction<string | undefined>) =>
        {
            state.form.yearlyIncome = action.payload;
        },
        setCreditScore: (state, action: PayloadAction<string>) =>
        {
            state.form.creditScore = action.payload;
        },
        setErrorMessage: (state, action: PayloadAction<string | undefined>) =>
        {
            state.errorMessage = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) =>
    {
        builder
            .addCase(applyAsync.pending, (state) =>
            {
                state.status = 'loading';
                state.errorMessage = undefined;
            })
            .addCase(applyAsync.fulfilled, (state, action) =>
            {
                state.status = 'idle';
                if (action.payload.qualify !== undefined)
                {
                    state.result = {
                        qualify: action.payload.qualify,
                        disqualificationMessage: action.payload.disqualificationMessage
                    }
                }
                state.errorMessage = action.payload.errorMessage;

            });
    },
});

export const { setInvestmentAmount, setInvestmentType, setTotalNetWorth, setYearlyIncome, setCreditScore, setErrorMessage } = applicationSlice.actions;

export const selectForm = (state: RootState) => state.application.form;
export const selectResult = (state: RootState) => state.application.result;
export const selectErrorMessage = (state: RootState) => state.application.errorMessage;
export const selectStatus = (state: RootState) => state.application.status;

export default applicationSlice.reducer;
